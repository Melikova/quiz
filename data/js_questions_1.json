{
    "quiz": [
      {
        "question": "What are the primitive data types in JavaScript?",
        "answers": {
          "a": "Strings, numbers, booleans, null, undefined",
          "b": "Arrays, objects, functions, symbols",
          "c": "Dates, regular expressions, maps, sets",
          "d": "Promises, iterators, generators, buffers"
        },
        "correctAnswer": "a"
      },
      {
        "question": "Explain the difference between null and undefined.",
        "answers": {
          "a": "null represents an intentional absence of any object value, while undefined represents an uninitialized or missing value.",
          "b": "null is used for numeric calculations, while undefined is used for string manipulations.",
          "c": "null is a truthy value, while undefined is a falsy value.",
          "d": "null can be converted to a string, while undefined cannot be converted."
        },
        "correctAnswer": "a"
      },
      {
        "question": "What is variable hoisting in JavaScript?",
        "answers": {
          "a": "The process of moving variables to the top of their scope before code execution.",
          "b": "The automatic conversion of variables into their primitive data types.",
          "c": "The practice of initializing variables with the keyword 'hoist'.",
          "d": "The ability to reassign variables multiple times within the same block."
        },
        "correctAnswer": "a"
      },
      {
        "question": "Describe the differences between var, let, and const keywords in JavaScript.",
        "answers": {
          "a": "var is function-scoped, let is block-scoped, and const is block-scoped and requires initialization with a value.",
          "b": "var is block-scoped, let is function-scoped, and const is function-scoped and requires initialization with a value.",
          "c": "var is block-scoped, let is block-scoped, and const is function-scoped.",
          "d": "var is function-scoped, let is function-scoped, and const is block-scoped and requires initialization with a value."
        },
        "correctAnswer": "a"
      },
      {
        "question": "What are the differences between pass-by-value and pass-by-reference in JavaScript?",
        "answers": {
          "a": "In pass-by-value, a copy of the value is passed, while in pass-by-reference, the reference to the value is passed.",
          "b": "In pass-by-value, the reference to the value is passed, while in pass-by-reference, a copy of the value is passed.",
          "c": "Pass-by-value and pass-by-reference are two terms for the same concept in JavaScript.",
          "d": "Pass-by-value and pass-by-reference are not applicable concepts in JavaScript."
        },
        "correctAnswer": "a"
      },
      {
        "question": "How do you check the type of a variable in JavaScript?",
        "answers": {
          "a": "By using the typeof operator.",
          "b": "By using the type() function.",
          "c": "By checking the constructor property.",
          "d": "By using the isType() method."
        },
        "correctAnswer": "a"
      },
      {
        "question": "Explain the concept of type coercion in JavaScript.",
        "answers": {
            "a": "Type coercion is the automatic conversion of values from one data type to another.",
            "b": "Type coercion is the process of explicitly specifying the data type of a variable.",
            "c": "Type coercion is the practice of assigning multiple data types to a single variable.",
            "d": "Type coercion is the process of converting a string into a number in JavaScript."
        },
        "correctAnswer": "a"
      },
      {
        "question": "What is event delegation in JavaScript?",
        "answers": {
          "a": "Event delegation is the process of associating an event with multiple elements simultaneously.",
          "b": "Event delegation is the practice of capturing events before they propagate to the target element.",
          "c": "Event delegation is the process of handling events on parent elements instead of individual child elements.",
          "d": "Event delegation is the practice of delaying event handling until all other tasks are complete."
        },
        "correctAnswer": "c"
      },
      {
        "question": "What is the purpose of the 'use strict' directive in JavaScript?",
        "answers": {
          "a": "The 'use strict' directive enforces stricter parsing and error handling in JavaScript code.",
          "b": "The 'use strict' directive enables the use of modern JavaScript features in older browsers.",
          "c": "The 'use strict' directive restricts the use of certain keywords and functionalities in JavaScript code.",
          "d": "The 'use strict' directive is a comment that has no effect on JavaScript code execution."
        },
        "correctAnswer": "a"
      },
      {
        "question": "What is the difference between synchronous and asynchronous JavaScript?",
        "answers": {
          "a": "Synchronous JavaScript executes tasks one after the other, while asynchronous JavaScript allows tasks to run independently of each other.",
          "b": "Synchronous JavaScript is used for server-side programming, while asynchronous JavaScript is used for client-side programming.",
          "c": "Synchronous JavaScript requires the use of callbacks, while asynchronous JavaScript uses promises or async/await.",
          "d": "Synchronous JavaScript is more efficient than asynchronous JavaScript in terms of performance."
        },
        "correctAnswer": "a"
      }
    ]
}
            